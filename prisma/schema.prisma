// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// criar migrate yarn prisma migrate dev

model User {
  id                String    @id @default(uuid())
  name              String
  photo             String?
  category          String    @default("franqueado")
  type              String    @default("cliente")
  course_restricted Boolean   @default(false)
  services          String    @default("")
  email             String    @unique
  phone_number      String
  password          String
  region            String    @default("")
  signature         Boolean   @default(false)
  sector1_id        String?   @default("")
  sector2_id        String?   @default("")
  sector3_id        String?   @default("")
  sector4_id        String?   @default("")
  sector5_id        String?   @default("")
  visible           Boolean   @default(true)
  course            Boolean   @default(false)
  resale            Boolean   @default(false)
  create_at         DateTime? @default(now())
  update_at         DateTime? @default(now())

  orders Order[]

  @@map("users")
}

model CompanyRenewal {
  id                String    @id @default(uuid())
  razao_social      String?
  fantasia          String?
  region            String?   
  type              String?    
  cnpj              String?    
  cpf               String?   
  phone_number      String?
  whatsapp          String?
  observation       String?
  date_init         DateTime? @default(now())
  date_renewal      DateTime? @default(now())
  create_at         DateTime? @default(now())
  update_at         DateTime? @default(now())

  companyTimeline CompanyTimeline[]

  @@map("company_renewals")
}

model CompanyTimeline {
  id             String    @id @default(uuid())
  name           String
  observation    String?
  date_reminder  DateTime? @default(now())
  check          Boolean   @default(false)
  renewal        CompanyRenewal     @relation(fields: [renewal_id], references: [id], onDelete: Cascade)
  renewal_id     String
  create_at      DateTime? @default(now())
  update_at      DateTime? @default(now())


  @@map("company_timelines")
}

model Collaborator {
  id           String    @id @default(uuid())
  name         String
  photo        String?
  type         String    @default("tecnico")
  email        String    @unique
  phone_number String
  password     String
  user_id      String?   @default("")
  enabled      Boolean   @default(true)
  sector       String    @default("Serviços de segurança do Trabalho")
  visible      Boolean   @default(true)
  create_at    DateTime? @default(now())
  update_at    DateTime? @default(now())

  orders Order[]

  @@map("collaborators")
}

model Admin {
  id        String    @id @default(uuid())
  password  String
  type      String    @default("admin")
  email     String    @unique
  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  @@map("admins")
}

model Order {
  id                 Int       @id @default(autoincrement())
  observation        String?
  message            String?
  order_linked_id    Int?      @default(0)
  name               String?   @default("")
  urgent             Boolean   @default(false)
  order_doc_recused  Boolean   @default(false)
  status             String    @default("pendente")
  month              String    @default("")
  company_id         String?   @default("")
  sector             String    @default("Serviços de segurança do Trabalho")
  create_at          DateTime? @default(now())
  update_at          DateTime? @default(now())

  user               User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id            String?

  collaborator       Collaborator? @relation(fields: [collaborator_id], references: [id], onDelete: Cascade)
  collaborator_id    String?

  items Item[]
  docs  Doc[]

  @@map("orders")
}

model Doc {
  id        String    @id @default(uuid())
  type      String
  file      String
  create_at DateTime? @default(now())
  update_at DateTime? @default(now())
  order     Order?    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id  Int?

  @@map("docs")
}

model Item {
  id          String    @id @default(uuid())
  amount      Int
  name        String
  value       Float
  commission  Float     @default(0)
  description String?
  order       Order     @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id    Int
  create_at   DateTime? @default(now())
  update_at   DateTime? @default(now())

  @@map("items")
}

model Service {
  id              String    @id @default(uuid())
  name            String
  value           Float
  commission      Float     @default(0)
  visible         Boolean   @default(true)
  clients_select  String    @default("")
  description     String?
  sector          String    @default("Serviços de segurança do Trabalho")
  create_at       DateTime? @default(now())
  update_at       DateTime? @default(now())

  @@map("services")
}

model Banner {
  id        String    @id @default(uuid())
  photo     String
  url       String
  types     String?   @default("tecnico;admin;franqueado;credenciado;")
  create_at DateTime? @default(now())
  update_at DateTime? @default(now())

  @@map("banners")
}

model Course {
  id            String    @id @default(uuid())
  name          String
  description   String
  order         Int       @default(0)
  photo         String?
  restricted    Boolean   @default(false)
  create_at     DateTime? @default(now())
  update_at     DateTime? @default(now())

  lessons Lesson[]

  @@map("courses")
}

model Lesson {
  id          String    @id @default(uuid())
  name        String
  order       Int       @default(0)
  description String?
  video       String?
  file        String?
  file_name   String?
  create_at   DateTime? @default(now())
  update_at   DateTime? @default(now())
  course      Course    @relation(fields: [course_id], references: [id], onDelete: Cascade)
  course_id   String

  @@map("lessons")
}

model Contract {
  id                  String    @id @default(uuid())
  user_id             String
  name                String
  company             String
  contact             String
  consultant          String
  phone_number        String
  banking             String
  services_gestao     String?   @default("")
  status              String    @default("aguardando")
  risk                Int?
  lifes               Int?
  discount            Int?
  initial_value       Float?    @default(0)
  life_value          Float?    @default(0)
  service_name        String?
  service_value       Float?
  service_description String?
  signature           String?
  signature_date      DateTime?
  create_at           DateTime? @default(now())
  update_at           DateTime? @default(now())

  services ContractServices[]

  @@map("contracts")
}

model ContractServices {
  id          String    @id @default(uuid())
  amount      Int
  name        String
  value       Float
  description String?
  contract    Contract  @relation(fields: [contract_id], references: [id], onDelete: Cascade)
  contract_id String
  create_at   DateTime? @default(now())
  update_at   DateTime? @default(now())

  @@map("contractServices")
}

model PasswordForgot {
  id         String    @id @default(uuid())
  user_email String
  code       String
  create_at  DateTime? @default(now())
  update_at  DateTime? @default(now())

  @@map("passwords_forgot")
}

model Credential {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  password      String?
  phone_number  String?
  state         String?
  city          String?
  enabled       Boolean   @default(false)
  visible       Boolean   @default(true)
  served_cities String?
  birthday      String?
  services      String?
  profession    String?
  photo         String?
  description   String?
  create_at     DateTime? @default(now())
  update_at     DateTime? @default(now())

  @@map("credentials")
}

model Company {
  id                  String    @id @default(uuid())
  razao_social        String?
  nome_fantasia       String?
  cnpj                String?
  ramo_atividade      String?
  cep                 String?
  endereco            String?
  nome_responsavel    String?
  cpf_responsavel     String?
  contato_responsavel String?
  observation         String?
  order_id            Int?      @default(0)
  status              String    @default("aguardando")
  collaborador_id     String  
  signature           String?
  signature_date      DateTime? @default(now())  
  create_at           DateTime? @default(now())
  update_at           DateTime? @default(now())

  companySector CompanySector[]
  companyImages  CompanyImages[]

  @@map("companies")
}

model CompanySector {
  id          String    @id @default(uuid())
  name        String
  description String
  create_at   DateTime? @default(now())
  update_at   DateTime? @default(now())
  company     Company?    @relation(fields: [company_id], references: [id], onDelete: Cascade)
  company_id  String?

  companyEmployees CompanyEmployees[]
  companyScratchs  CompanyScratchs[]

  @@map("company_sectors")
}

model CompanyEmployees {
  id                         String    @id @default(uuid())
  name                       String
  cbo                        String?
  quantidade_colaboradores   Int?
  quantidade_colaboradores_m Int?
  quantidade_colaboradores_f Int?
  description                String?
  epis                       String?
  create_at                  DateTime? @default(now())
  update_at                  DateTime? @default(now())

  company_sector             CompanySector?    @relation(fields: [company_sector_id], references: [id], onDelete: Cascade)
  company_sector_id          String?

  @@map("company_employees")
}

model CompanyScratchs {
  id                 String    @id @default(uuid())
  name               String
  description        String
  type               String   
  create_at          DateTime? @default(now())
  update_at          DateTime? @default(now())

  company_sector     CompanySector?    @relation(fields: [company_sector_id], references: [id], onDelete: Cascade)
  company_sector_id  String?

  @@map("company_scratchs")
}

model CompanyImages {
  id          String    @id @default(uuid())
  photo       String
  index       Int
  create_at   DateTime? @default(now())
  update_at   DateTime? @default(now())
  company     Company?    @relation(fields: [company_id], references: [id], onDelete: Cascade)
  company_id  String?

  @@map("company_images")
}