// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// criar migrate yarn prisma migrate dev

model User {
  id                   String    @id @default(uuid())
  name                 String
  photo                String?
  category             String    @default("franqueado")
  type                 String    @default("cliente")
  modules              String?   
  services             String    @default("")
  courses              String    @default("")
  email                String    @unique
  phone_number         String
  password             String
  city                 String    @default("")
  state                String    @default("")
  signature            Boolean   @default(false)
  sector1_id           String?   @default("")
  sector2_id           String?   @default("")
  sector3_id           String?   @default("")
  sector4_id           String?   @default("")
  sector5_id           String?   @default("")
  costumer_id          String?   @default("")
  visible              Boolean   @default(true)
  course               Boolean   @default(false)
  enable_payment       Boolean   @default(true)
  resale               Boolean   @default(false)
  create_at            DateTime? @default(now())
  update_at            DateTime? @updatedAt

  statement_confirms  StatementConfirm[]
  orders              Order[]
  leads               Lead[]
  redemptions         Redemption[]
  lessonConfirms      LessonConfirm[]

  @@map("users")
}

model CompanyRenewal {
  id                String    @id @default(uuid())
  razao_social      String?
  fantasia          String?
  region            String?   
  type              String?    
  cnpj              String?    
  cpf               String?   
  phone_number      String?
  whatsapp          String?
  observation       String?
  date_init         DateTime? @default(now())
  date_renewal      DateTime? @default(now())
  create_at         DateTime? @default(now())
  update_at         DateTime? @updatedAt

  companyTimeline CompanyTimeline[]

  @@map("company_renewals")
}

model CompanyTimeline {
  id             String    @id @default(uuid())
  name           String
  observation    String?
  date_reminder  DateTime? @default(now())
  check          Boolean   @default(false)
  renewal        CompanyRenewal     @relation(fields: [renewal_id], references: [id], onDelete: Cascade)
  renewal_id     String
  create_at      DateTime? @default(now())
  update_at      DateTime? @updatedAt


  @@map("company_timelines")
}

model Collaborator {
  id           String    @id @default(uuid())
  name         String
  photo        String?
  type         String    @default("tecnico")
  email        String    @unique
  phone_number String
  password     String
  user_id      String?   @default("")
  enabled      Boolean   @default(true)
  sector       String    @default("Serviços de segurança do Trabalho")
  visible      Boolean   @default(true)
  create_at    DateTime? @default(now())
  update_at    DateTime? @updatedAt

  orders Order[]

  @@map("collaborators")
}

model Admin {
  id        String    @id @default(uuid())
  password  String
  type      String    @default("admin")
  email     String    @unique
  create_at DateTime? @default(now())
  update_at DateTime? @updatedAt

  @@map("admins")
}

model Order {
  id                         Int       @id @default(autoincrement())
  observation                String?
  observationCollaborator    String?   @default("")
  order_linked_id            Int?      @default(0)
  name                       String?   @default("")
  urgent                     Boolean   @default(false)
  order_doc_recused          Boolean   @default(false)
  status                     String    @default("pendente")
  status_payment             String    @default("pendente")
  month                      String    @default("")
  company_id                 String?   @default("")
  asaas_integration          Boolean   @default(false)
  sector                     String    @default("Serviços de segurança do Trabalho")
  create_at                  DateTime? @default(now())
  update_at                  DateTime? @updatedAt
    
    
  user                       User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id                    String?
    
  collaborator               Collaborator? @relation(fields: [collaborator_id], references: [id], onDelete: Cascade)
  collaborator_id            String?

  items                     Item[]
  docs                      Doc[]
  messages                  OSMessages[]
  redemptions               Redemption[]
     
  payment                   Payment?   @relation(fields: [payment_id], references: [id], onDelete: SetNull)
  payment_id                String? 

  @@map("orders")
}



model Payment {
  id          String    @id @default(uuid())
  asaas_id    String    @unique
  status      String    
  order_id    Int    
  value       Float    

  create_at   DateTime? @default(now())
  update_at   DateTime? @updatedAt

  orders Order[]

  @@map("payments")
}

model Doc {
  id        String    @id @default(uuid())
  type      String
  file      String
  create_at DateTime? @default(now())
  update_at DateTime? @updatedAt
  order     Order?    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id  Int?

  @@map("docs")
}

model Item {
  id          String    @id @default(uuid())
  amount      Int
  name        String
  value       Float
  commission  Float     @default(0)
  description String?
  order       Order     @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id    Int
  create_at   DateTime? @default(now())
  update_at   DateTime? @updatedAt

  @@map("items")
}

model Service {
  id              String    @id @default(uuid())
  name            String
  value           Float
  commission      Float     @default(0)
  visible         Boolean   @default(true)
  description     String?
  sector          String    @default("Serviços de segurança do Trabalho")
  create_at       DateTime? @default(now())
  update_at       DateTime? @updatedAt

  @@map("services")
}

model LeadMaster {
  id              String      @id @default(uuid())
  name            String
  email           String?     
  phone_number    String?
  tag             String?     @default("Cadastrado")
  necessity       String?
  cnpj            String?
  employees       String?
  location        String?
  value           Float?     
  observation     String?
  is_user         Boolean     @default(false)
  create_at       DateTime?   @default(now())
  update_at       DateTime?  @updatedAt

  leads           Lead[]
  
  @@map("leads_master")
}

model Lead {
  id              String        @id @default(uuid())
  name            String
  email           String?
  phone_number    String?
  status          String        @default("Oportunidade")
  tag             String?       @default("Cadastrado")
  necessity       String?
  cnpj            String?
  employees       String?
  location        String?
  user_id         String
  contract_id     String?
  value           Float?     
  lead_id         String?
  observation     String?
  create_at       DateTime?     @default(now())
  update_at       DateTime?     @updatedAt

  user            User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  leadMaster      LeadMaster?   @relation(fields: [lead_id], references: [id], onDelete: Cascade)

  historical      Historic[]
  lead_reminders  LeadReminders[]
  contracts       Contract[]
  
  @@map("leads")
}

model Announcement {
  id              String   @id @default(uuid())
  title           String
  message         String?
  image           String
  create_at       DateTime @default(now())

  confirmations   AnnouncementConfirmation[]
  
  @@map("announcements") 
}

model AnnouncementConfirmation {
  id                String      @id @default(uuid())
  announcement_id   String
  user_id           String 
  confirmed_at       DateTime    @default(now())
  
  announcement      Announcement   @relation(fields: [announcement_id], references: [id], onDelete: Cascade)
  
  @@map("announcement_confirmations") 
}

model Historic {
  id        String    @id @default(uuid())
  name      String
  lead_id   String
  create_at DateTime? @default(now())
  update_at DateTime? @updatedAt
  lead      Lead      @relation(fields: [lead_id], references: [id], onDelete: Cascade)

  @@map("historical")
}

model Banner {
  id        String    @id @default(uuid())
  photo     String
  url       String
  types     String?   @default("tecnico;admin;franqueado;credenciado;")
  create_at DateTime? @default(now())
  update_at DateTime? @updatedAt

  @@map("banners")
}

model Course {
  id            String    @id @default(uuid())
  name          String
  description   String
  order         Int       @default(0)
  photo         String?
  create_at     DateTime? @default(now())
  update_at     DateTime? @updatedAt

  module        Module?    @relation(fields: [module_id], references: [id], onDelete: SetNull)
  module_id     String?    

  lessons Lesson[]

  @@map("courses")
}


model Module {
  id            String    @id @default(uuid())
  name          String
  description   String
  order         Int       @default(0)
  restricted    Boolean   @default(false)
  create_at     DateTime? @default(now())
  update_at     DateTime? @updatedAt

  courses       Course[]

  @@map("modules")
}

model Lesson {
  id          String    @id @default(uuid())
  name        String
  order       Int       @default(0)
  description String?
  video       String?
  file        String?
  file_name   String?
  create_at   DateTime? @default(now())
  update_at   DateTime? @updatedAt
  course      Course    @relation(fields: [course_id], references: [id], onDelete: Cascade)
  course_id   String
  confirms    LessonConfirm[]

  @@map("lessons")
}


model LessonConfirm {
  id          String    @id @default(uuid())
  user_id     String
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  create_at   DateTime? @default(now())
  lesson      Lesson    @relation(fields: [lesson_id], references: [id], onDelete: Cascade)
  lesson_id   String    

  @@unique([user_id, lesson_id])
  @@map("lessonConfirms")
}

model Contract {
  id                  String    @id @default(uuid())
  user_id             String
  name                String
  company             String
  contact             String
  consultant          String
  phone_number        String
  banking             String
  lead_id             String?   
  lead                Lead?     @relation(fields: [lead_id], references: [id], onDelete: SetNull)
  is_crm              Boolean   @default(false)
  services_gestao     String?   @default("")
  status              String    @default("aguardando")
  risk                Int?
  lifes               Int?
  discount            Int?
  initial_value       Float?    @default(0)
  life_value          Float?    @default(0)
  service_name        String?
  service_value       Float?
  service_description String?
  signature           String?
  signature_date      DateTime?
  create_at           DateTime? @default(now())
  update_at           DateTime? @updatedAt

  services ContractServices[]

  @@map("contracts")
}

model ContractServices {
  id          String    @id @default(uuid())
  amount      Int
  name        String
  value       Float
  description String?
  contract    Contract  @relation(fields: [contract_id], references: [id], onDelete: Cascade)
  contract_id String
  create_at   DateTime? @default(now())
  update_at   DateTime? @updatedAt

  @@map("contractServices")
}

model PasswordForgot {
  id         String    @id @default(uuid())
  user_email String
  code       String
  create_at  DateTime? @default(now())
  update_at  DateTime? @updatedAt

  @@map("passwords_forgot")
}

model Credential {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  password      String?
  phone_number  String?
  state         String?
  city          String?
  enabled       Boolean   @default(false)
  visible       Boolean   @default(true)
  served_cities String?
  birthday      String?
  services      String?
  profession    String?
  photo         String?
  description   String?
  create_at     DateTime? @default(now())
  update_at     DateTime? @updatedAt

  @@map("credentials")
}

model Company {
  id                  String    @id @default(uuid())
  razao_social        String?
  nome_fantasia       String?
  cnpj                String?
  ramo_atividade      String?
  cep                 String?
  endereco            String?
  nome_responsavel    String?
  cpf_responsavel     String?
  contato_responsavel String?
  observation         String?
  order_id            Int?      @default(0)
  status              String    @default("aguardando")
  collaborador_id     String  
  signature           String?
  signature_date      DateTime? @default(now())  
  create_at           DateTime? @default(now())
  update_at           DateTime? @updatedAt

  companySector       CompanySector[]
  companyImages       CompanyImages[]

  @@map("companies")
}

model CompanySector {
  id               String    @id @default(uuid())
  name             String
  description      String
  create_at        DateTime? @default(now())
  update_at        DateTime? @updatedAt
  company          Company?    @relation(fields: [company_id], references: [id], onDelete: Cascade)
  company_id       String?

  companyEmployees CompanyEmployees[]
  companyScratchs  CompanyScratchs[]

  @@map("company_sectors")
}

model CompanyEmployees {
  id                         String    @id @default(uuid())
  name                       String
  cbo                        String?
  quantidade_colaboradores   Int?
  quantidade_colaboradores_m Int?
  quantidade_colaboradores_f Int?
  description                String?
  epis                       String?
  create_at                  DateTime? @default(now())
  update_at                  DateTime? @updatedAt

  company_sector             CompanySector?    @relation(fields: [company_sector_id], references: [id], onDelete: Cascade)
  company_sector_id          String?

  @@map("company_employees")
}

model CompanyScratchs {
  id                 String    @id @default(uuid())
  name               String
  description        String
  type               String   
  create_at          DateTime? @default(now())
  update_at          DateTime? @updatedAt

  company_sector     CompanySector?    @relation(fields: [company_sector_id], references: [id], onDelete: Cascade)
  company_sector_id  String?

  @@map("company_scratchs")
}

model CompanyImages {
  id          String    @id @default(uuid())
  photo       String
  index       Int
  create_at   DateTime? @default(now())
  update_at   DateTime? @updatedAt
  company     Company?    @relation(fields: [company_id], references: [id], onDelete: Cascade)
  company_id  String?

  @@map("company_images")
}

model LeadReminders {
  id                  String      @id @default(uuid())
  name                String
  description         String
  confirm             Boolean
  date                DateTime? 

  lead_id             String
  lead                Lead        @relation(fields: [lead_id], references: [id], onDelete: Cascade)

  @@map("lead_reminders")
}

model Statement {
  id                  String    @id @default(uuid())
  title               String
  description         String?
  create_at           DateTime? @default(now())
  update_at           DateTime? @updatedAt

  statement_confirms  StatementConfirm[]

  @@map("statements")
}

model StatementConfirm {
  id                String        @id @default(uuid())
  date              DateTime      @default(now())
  statement_id      String
  user_id           String
  statement         Statement     @relation(fields: [statement_id], references: [id], onDelete: Cascade)
  user              User          @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("statement_confirms")
}

model Coupon {
  id             String   @id @default(uuid())
  name           String
  code           String   @unique
  type           CouponType
  value          Float
  active         Boolean  @default(true) 
  isSingleUse    Boolean  @default(false) 
  minValue       Float?     
  usageLimit     Int?     
  expirationDate DateTime? 
  create_at      DateTime @default(now())
  update_at      DateTime @updatedAt

  redemptions    Redemption[]

  @@map("coupons")
}

model Redemption {
  id        String     @id @default(uuid())
  name      String
  userId    String?
  orderId   Int        @unique
  couponId  String?
  value     Float
  usedAt    DateTime   @default(now())

  coupon    Coupon?    @relation(fields: [couponId], references: [id], onDelete: SetNull)
  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  order     Order      @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@map("redemptions")
}


model OSMessages {
  id          String    @id @default(uuid())
  message     String
  type        String?
  orderId     Int      
  create_at   DateTime  @default(now())

  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("os_messages")
}

enum CouponType {
  FIXED
  PERCENTAGE
}
